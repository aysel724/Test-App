{"ast":null,"code":"var _jsxFileName = \"/Users/jeyhun/Desktop/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430 7/my-app/src/Page.js\",\n  _s2 = $RefreshSig$();\nimport { Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Page() {\n  _s2();\n  var _s = $RefreshSig$();\n  const DataFetcher = () => {\n    _s();\n    const url = \"https://imdb-top-100-movies.p.rapidapi.com/\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"X-RapidAPI-Key\": \"bf647e4a99msha8138dcc8cc2a78p1c5356jsn037d99130b76\",\n        \"X-RapidAPI-Host\": \"imdb-top-100-movies.p.rapidapi.com\"\n      }\n    };\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n      fetchData();\n    }, []);\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok.\");\n        }\n        const data = await response.json();\n        console.log(data);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        console.log(error);\n        setLoading(false);\n      }\n    };\n  };\n  _s(DataFetcher, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n  let {\n    index\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s2(Page, \"E08VgRgNV8qnNN+/3ZJEYTajGM0=\", false, function () {\n  return [useParams];\n});\n_c = Page;\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["Container","useParams","jsxDEV","_jsxDEV","Page","_s2","_s","$RefreshSig$","DataFetcher","url","options","method","headers","data","setData","useState","loading","setLoading","error","setError","useEffect","fetchData","response","fetch","ok","Error","json","console","log","message","index","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeyhun/Desktop/Новая папка 7/my-app/src/Page.js"],"sourcesContent":["import { Container } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\n\nfunction Page() {\n  const DataFetcher = () => {\n    const url = \"https://imdb-top-100-movies.p.rapidapi.com/\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"X-RapidAPI-Key\": \"bf647e4a99msha8138dcc8cc2a78p1c5356jsn037d99130b76\",\n        \"X-RapidAPI-Host\": \"imdb-top-100-movies.p.rapidapi.com\",\n      },\n    };\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n      fetchData();\n    }, []);\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok.\");\n        }\n        const data = await response.json();\n        console.log(data);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        console.log(error);\n        setLoading(false);\n      }\n    };\n  };\n  let { index } = useParams();\n  return (\n    <div>\n      <Container>\n        <p>{index}</p>\n      </Container>\n    </div>\n  );\n}\n\nexport default Page;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,IAAIA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACd,MAAMC,WAAW,GAAGA,CAAA,KAAM;IAAAF,EAAA;IACxB,MAAMG,GAAG,GAAG,6CAA6C;IACzD,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACrB;IACF,CAAC;IACD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;IACpC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;IAC5C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;IAExCK,SAAS,CAAC,MAAM;MACdC,SAAS,CAAC,CAAC;IACb,CAAC,EAAE,EAAE,CAAC;IAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC;QAC5C,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjD;QACA,MAAMZ,IAAI,GAAG,MAAMS,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;QACjBC,OAAO,CAACD,IAAI,CAAC;QACbI,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACW,OAAO,CAAC;QACvBF,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;QAClBD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;EACH,CAAC;EAACX,EAAA,CAjCIE,WAAW;EAkCjB,IAAI;IAAEsB;EAAM,CAAC,GAAG7B,SAAS,CAAC,CAAC;EAC3B,oBACEE,OAAA;IAAA4B,QAAA,eACE5B,OAAA,CAACH,SAAS;MAAA+B,QAAA,eACR5B,OAAA;QAAA4B,QAAA,EAAID;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAAC9B,GAAA,CA3CQD,IAAI;EAAA,QAmCKH,SAAS;AAAA;AAAAmC,EAAA,GAnClBhC,IAAI;AA6Cb,eAAeA,IAAI;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}